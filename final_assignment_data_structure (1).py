# -*- coding: utf-8 -*-
"""Final Assignment - Data Structure

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13MymhYL0IFE14Tmi1ZSAxUwKGHbi9SpA
"""

class SocialMediaPost:
    def __init__(self, datetime, post_content, author):
        self.datetime = datetime
        self.post_content = post_content
        self.author = author

class SocialMediaManager:
    def __init__(self):
        self.posts = {}

    def add_post(self, post):
        # The datetime of the post serves as a unique key
        self.posts[post.datetime] = post

    def retrieve_post(self, datetime):
        # Retrieve a post in O(1) time using the datetime key
        if datetime in self.posts:
            return self.posts[datetime]
        else:
            return "Post not found"

    def display_post_details(self, datetime):
        post = self.retrieve_post(datetime)
        if post != "Post not found":
            print(f"Post Content: {post.post_content}")
            print(f"Author: {post.author}")
        else:
            print(post)

# Example Usage
post1 = SocialMediaPost("2024-04-19T08:00:00", "Good Morning Professor Drew!", "Lionel Messi")
post2 = SocialMediaPost("2024-03-19T08:00:00", "Nice Weather!", "Khalifa Alshehhi")
post3 = SocialMediaPost("2024-02-19T08:00:00", "How are you today?", "Undertaker")

manager = SocialMediaManager()
manager.add_post(post1)
manager.display_post_details("2024-04-19T08:00:00")

manager = SocialMediaManager()
manager.add_post(post3)
manager.display_post_details("2024-02-19T08:00:00")

manager = SocialMediaManager()
manager.add_post(post1)
manager.display_post_details("2004-04-19T08:00:00")

class TreeNode:
    def __init__(self, key, post_content, author):
        self.left = None
        self.right = None
        self.key = key
        self.post_content = post_content
        self.author = author

class BinarySearchTree:
    def __init__(self):
        self.root = None

    def insert(self, key, post_content, author):
        if not self.root:
            self.root = TreeNode(key, post_content, author)
        else:
            self._insert(self.root, key, post_content, author)

    def _insert(self, node, key, post_content, author):
        if key < node.key:
            if node.left is None:
                node.left = TreeNode(key, post_content, author)
            else:
                self._insert(node.left, key, post_content, author)
        else:
            if node.right is None:
                node.right = TreeNode(key, post_content, author)
            else:
                self._insert(node.right, key, post_content, author)

    def find_range(self, start_key, end_key):
        # Find and return all posts within the range
        return self._find_range(self.root, start_key, end_key, [])

    def _find_range(self, node, start_key, end_key, found_posts):
        if node:
            if start_key <= node.key <= end_key:
                found_posts.append((node.key, node.post_content, node.author))
                self._find_range(node.left, start_key, end_key, found_posts)
                self._find_range(node.right, start_key, end_key, found_posts)
            elif node.key < start_key:
                self._find_range(node.right, start_key, end_key, found_posts)
            elif node.key > end_key:
                self._find_range(node.left, start_key, end_key, found_posts)
        return found_posts

# Example Usage
bst = BinarySearchTree()
bst.insert("2004-08-03T01:01:01", "Khalifa's birthday!", "Ahmed")
bst.insert("1987-06-24T10:30:19", "Messi's birthday!", "Jorge")
bst.insert("2024-04-16T15:00:00", "Is this afternoon in Dubai???", "Drew")

# Query for posts on a specific date
posts = bst.find_range("1987-06-24T10:30:19", "2024-04-19T23:59:59")
for post in posts:
    print(f"DateTime: {post[0]}, Content: {post[1]}, Author: {post[2]}")

import heapq

class SocialMediaPost:
    def __init__(self, post_content, author, views):
        self.post_content = post_content
        self.author = author
        self.views = views
        # The heap will store tuples, and we use negative views for max-heap behavior
        self.heap_node = (-self.views, self.post_content, self.author)

class PostHeap:
    def __init__(self):
        self.heap = []

    def add_post(self, post):
        # Insert the post into the heap
        heapq.heappush(self.heap, post.heap_node)

    def get_top_post(self):
        # Return the post with the maximum views
        if self.heap:
            top_post = heapq.heappop(self.heap)
            # Convert back to positive views
            return (-top_post[0], top_post[1], top_post[2])
        else:
            return "No posts available"

    def display_top_post(self):
        top_post = self.get_top_post()
        if top_post != "No posts available":
            print(f"Views: {top_post[0]}, Content: {top_post[1]}, Author: {top_post[2]}")
        else:
            print(top_post)

# Example Usage
heap = PostHeap()
post1 = SocialMediaPost("What A Goal!!", "Pep", 343500)
post2 = SocialMediaPost("How to make the perfect pizza", "Margot", 134750)
post3 = SocialMediaPost("Look at the food!", "Simba", 68732)
post4 = SocialMediaPost("Do you love the snow?", "Elsa", 297873)

heap.add_post(post1)
heap.add_post(post2)
heap.add_post(post3)
heap.add_post(post4)

heap.display_top_post()